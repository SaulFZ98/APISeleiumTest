{"name": "test_create_user_invalid_input[data2-age]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 201 == 422\n +  where 201 = <Response [201]>.status_code", "trace": "data = {'email': 'test@example.com', 'name': 'Test User'}, expected_field = 'age'\n\n    @allure.feature(\"User Management - Negative\") # este decorador define una categoria principal o funcionalidad de alti nivel a la que pertenece la prueba y en el reporte de allure agrupara todas las pruebas de esta categoria\n    @allure.story(\"Create user with invalid data\") # este decorador define una historia especifica de usuario o caso de uso dentro del fearure, en el reporte tambien permite agrupar varias pruebas que prueben el mismo comportamiento\n    @allure.tag(\"negative\")\n    @allure.severity(allure.severity_level.NORMAL) # asigna el nivel de severidad o prioridad de la prueba y en allure te permite filtrar por severidad, normal= error funcional comun, blocker= bloquea la app completamente si falla, critical= afecta funcionalidad clave, minor=detalle o fallo poco grave, TRIVIAL=visual texto.etc\n    # es un decorador de pytest utlizamos parametrize porque permite ejecutar la misma prueba multiples veces con diferentes datos de entrada sin tener que escribir funciones separadas ,pasandole una lista de diccionarios (data) que representa los distintos escenarios\n    @pytest.mark.parametrize(\"data,expected_field\",[\n        ({\"email\": \"x@example.com\", \"age\": 30}, \"name\"),\n        ({\"name\": \"Test User\", \"age\": 30}, \"email\"),\n        ({\"name\": \"Test User\", \"email\": \"test@example.com\"}, \"age\"),\n    ])\n    \n    def test_create_user_invalid_input(data, expected_field): # se llama todas las entradas de data\n        response = requests.post(f\"{BASE_URL}/users\",json=data)\n>       assert response.status_code == 422   # 422 es unprocessable entity es la respuesta esperada cuando FastAPi no puede validar los datos por errores en el esquema gracias a pydantic\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       assert 201 == 422\nE        +  where 201 = <Response [201]>.status_code\n\ntest_user_negative.py:25: AssertionError"}, "parameters": [{"name": "data", "value": "{'name': 'Test User', 'email': 'test@example.com'}"}, {"name": "expected_field", "value": "'age'"}], "start": 1757703379947, "stop": 1757703379966, "uuid": "0b746f85-820d-4f49-adc5-21307e08dee9", "historyId": "fdb4618d827f3ef8c25b037bc037b5c3", "testCaseId": "69c7a15c959116610df042c1d36d605f", "fullName": "test_user_negative#test_create_user_invalid_input", "labels": [{"name": "story", "value": "Create user with invalid data"}, {"name": "tag", "value": "negative"}, {"name": "severity", "value": "normal"}, {"name": "feature", "value": "User Management - Negative"}, {"name": "suite", "value": "test_user_negative"}, {"name": "host", "value": "LAM48"}, {"name": "thread", "value": "15832-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_user_negative"}]}